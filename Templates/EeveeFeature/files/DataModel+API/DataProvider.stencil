//
//  {{ name }}DataProvider.swift
//

import Combine
import Foundation

protocol {{ name }}DataProviding {
    var dataModel: AnyPublisher<{{ name }}DataModel, Never> { get }
    func fetch{{ name }}Data()
}

final class {{ name }}DataProvider: {{ name }}DataProviding {
    
    var dataModel: AnyPublisher<{{ name }}DataModel, Never> {
        dataSubject.eraseToAnyPublisher()
    }
    
    private var dataSubject = CurrentValueSubject<{{ name }}DataModel, Never>(.empty)
    
    func fetch{{ name }}Data() {
        guard let url = URL(string: "") else { return }
        URLSession.shared.dataTask(with: url) { [weak self] data, response, error in
            guard error == nil, let data = data else {
                print("Error fetching data: \(error?.localizedDescription ?? "Unknown error")")
                return
            }
            do {
                let decodedData = try JSONDecoder().decode([ElementDataModel].self, from: data)
                self?.dataSubject.send({{ name }}DataModel(elementList: decodedData))
            } catch {
                print("Error decoding data: \(error.localizedDescription)")
            }
        }.resume()
    }
}