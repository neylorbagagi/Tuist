//
//  {{ name }}View.swift
//

import UIKit
import Combine

final class {{ name }}View: UIViewController {
    private var displayState: {{ name }}DisplayState
    private var viewModel: {{ name }}ViewModel
    private var eventStream: {{ name }}EventStream
    private var cancellables = Set<AnyCancellable>()

    private lazy var stackView: UIStackView = {
        let stackView = UIStackView()
        stackView.translatesAutoresizingMaskIntoConstraints = false
        stackView.axis = .vertical
        stackView.alignment = .center
        return stackView
    }()

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    init(viewModel: {{ name }}ViewModel,
         eventStream: {{ name }}EventStream
    ) {
        self.displayState = .empty
        self.viewModel = viewModel
        self.eventStream = eventStream
        super.init(nibName: nil, bundle: nil)
        
        binding()
        setupView()
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        eventStream.send(.viewDidLoad)
    }
    
    private func setupView() {
        view.backgroundColor = .systemBackground
        view.addSubview(stackView)

        NSLayoutConstraint.activate([
            stackView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            stackView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            stackView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            stackView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor)
        ])
    }
    
    private func binding() {
        viewModel.$displayState
            .receive(on: DispatchQueue.main)
            .sink { [weak self] newState in
                self?.updateDisplayState(with: newState)
        }.store(in: &cancellables)
    }
    
    private func updateDisplayState(with newState: {{ name }}DisplayState) {
        displayState = newState
        title = displayState.title
    }
}